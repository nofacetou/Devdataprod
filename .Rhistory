library("caret")
?creatFolds
?createFolds
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
train$ind=row(train)
library(data.table)
t = data.table(train)
t[, index := seq_len(.N)]
View(t)
?data.table
View(t)
str(t)
head(t)
t[1]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(data.table)
t = data.table(training)
t = t[, index := seq_len(.N)]
View(t)
60/
60/3.14
50*1.5
100/1.5
100*
3
100*3*4
library(Himcs)
library(Hmisc)
cutcomp =  cut2(training$CompressiveStrength, g=4)
table(cutcomp)
qplot(CompressiveStrength, colour=cutcomp, data=training)
cutcomp =  cut2(t$CompressiveStrength, g=4)
qplot(index, CompressiveStrength, colour=cutcomp, data=t)
qplot(age, CompressiveStrength, colour=cutcomp, data=t)
qplot(Age, CompressiveStrength, colour=cutcomp, data=t)
qplot(FlyAsh, CompressiveStrength, colour=cutcomp, data=t)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training$SuperPlasticizer)
summary(training)
hist(training$Superplasticizer)
t=log(training$Superplasticizer)
hist(training$Superplasticizer)
hist(t)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve,main="",xlab="ave. capital run length")
View(spam)
preObj <- preProcess(training[,-58],method=c("center","scale"))
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
cor(training[,-58])
m
M
diag(M) <- 0
which(M > 0.8,arr.ind=T)
names(spam)[c(34,32)]
?prcomp
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
table(training$diagnosis)
colnames(training)
col = colnames(training)
col_keep = grepl("^IL")
?grepl
col_keep = grepl("^IL", col)
sum(col_keep)
col[col_keep]
col_keep[1] = TRUE
smalltrain = train[,col_keep]
smalltrain = train[,col_keep==TRUE]
smalltrain = train[col_keep==TRUE]
smalltrain = training[col_keep]
t = smalltrain[,-1]
View(t)
preProc<-preProcess(t,method="pca")
trainPC<-predict(preProc,t)
preProc<-preProcess(smalltrain[,-1],method="pca")
trainPC<-predict(preProc,smalltrain[,-1])
modelFit<-train(smalltrain$diagnosis~.,method="glm",data=trainPC)
modelFit<-train(smalltrain$diagnosis~.,method="glm",data=trainPC)
modelFit<-train(smalltrain$diagnosis ~ .,method="glm",data=trainPC)
modelFit <- train(smalltrain$diagnosis ~ .,method="glm",preProcess="pca",data=training)
install.packages('e1071', dependencies=TRUE)
modelFit<-train(smalltrain$diagnosis~.,method="glm",data=trainPC)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
col = colnames(training)
col_keep = grepl("^IL", col)
smalltrain = training[col_keep]
preProc<-preProcess(t,method="pca")
preProc<-preProcess(smalltrain[,-1],method="pca")
trainPC<-predict(preProc,smalltrain[,-1])
modelFit<-train(smalltrain$diagnosis~.,method="glm",data=trainPC)
modelFit<-train(smalltrain$diagnosis~.,method="glm",data=trainPC)
col_keep[1] = TRUE
smalltrain = training[col_keep]
preProc<-preProcess(smalltrain[,-1],method="pca")
trainPC<-predict(preProc,smalltrain[,-1])
modelFit<-train(smalltrain$diagnosis~.,method="glm",data=trainPC)
t = smalltrain[,-1]
t.pca <- prcomp(t, scale.=TRUE)
var.vector <- t.pca$sdev^2
relative.var <- var.vector/sum(var.vector)
relative.var
cumsum(relative.var)
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
install.packages(ISLR)
install.packages("ISLR")
modelFit1 <- train(smalltrain$diagnosis ~ .,method="glm",preProcess="pca",data=smalltrain)
confusionMatrix(smalltrain$diagnosis,predict(modelFit1,testing))
confusionMatrix(testing$diagnosis,predict(modelFit1,testing))
modelFit1 <- train(smalltrain$diagnosis ~ .,method="glm",preProcess="pca",thresh=0.8,data=smalltrain)
modelFit1 <- train(smalltrain$diagnosis ~ .,method="glm",preProcess="pca",trControl = trainControl(preProcOptions = list(thresh = 0.8)),data=smalltrain)
confusionMatrix(testing$diagnosis,predict(modelFit1,testing))
modelFit2 <- train(smalltrain$diagnosis ~ .,method="glm",data=smalltrain)
confusionMatrix(testing$diagnosis,predict(modelFit2,testing))
?relevel
?level
?relevel
?abline
fit=lm(mpg~factor(cyl)+wt+factor(cyl)*wt,data=mtcars)
summary(fit)
fit=lm(mpg~factor(cyl)+wt,data=mtcars)
summary(fit)
fit1=lm(mpg~factor(cyl),data=mtcars)
summary(fit1)
?lrt
?lrtest
require(lmtest)
install.packages("lmtest")
require(lmtest)
fit3=lm(mpg~factor(cyl)+wt+factor(cyl)*wt,data=mtcars)
lrtest(fit,fit3)
lrtest(fit3,fit)
?I
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))
wt
mtcars$wt
I(mtcars$wt*.5)
summary(fit1)
summary(fit)
?mtcars
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?influence.measures
inf = influence.measures(lm(y~x))
summary(inf)
inf
plot(y~x)
?expression
length(ex1 <- expression(1 + 0:9))
ex1
eval(ex1)
?ylab
?plot
plot(1, col.axis = "sky blue", col.lab = "thistle")
title("Main Title", sub = "sub title",
cex.main = 2,   font.main= 4, col.main= "blue",
cex.sub = 0.75, font.sub = 3, col.sub = "red")
x <- seq(-4, 4, len = 101)
y <- cbind(sin(x), cos(x))
matplot(x, y, type = "l", xaxt = "n",
main = expression(paste(plain(sin) * phi, "  and  ",
plain(cos) * phi)),
ylab = expression("sin" * phi, "cos" * phi), # only 1st is taken
xlab = expression(paste("Phase Angle ", phi)),
col.main = "blue")
plot(1:10, xlab=expression('hi'[5]*'there'[6]^8*'you'[2]))
ylab=expression(log~L[peak*","*gamma][~erg~s^-1])
plot(1,1,ylab=ylab)
data(iris); library(ggplot2)
names(iris)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
library(caret)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
?rpart
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library("rpart.plot")
library(rpart.plot)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
predict(modFit,newdata=testing)
library(ElemStatLearn); data(ozone,package="ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
install.packages("ElemStatLearn")
?ElemStatLearn
library(ElemStatLearn); data(ozone,package="ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ss <- sample(1:dim(ozone)[1],replace=T)
ozone0 <- ozone[ss,]
View(ozone0)
View(ozone)
?loess
ll <- matrix(NA,nrow=10,ncol=155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1],replace=T)
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
View(ll)
ll[1,]
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
install.packages("party")
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
plot(ozone$ozone,temperature,col='lightgrey',pch=19)
points(ozone$ozone,predict(treebag$fits[[1]]$fit,predictors),pch=19,col="red")
points(ozone$ozone,predict(treebag,predictors),pch=19,col="blue")
ctreeBag$fit
dat <- c(119,120,131,209,210,337,332,287,146,1
29,232,169,208,253,142,105,419,179,
324,287,115,132,308,356,286,221,204,
105,45,245)
dat <- c(119,120,131,209,210,337,332,287,146,129,232,169,208,253,142,105,419,179,324,287,115,132,308,356,286,221,204,105,45,245)
boot.sample <- list()
for(i in 1:1000){
boot.sample[[i]] <- sample(dat,size = 30, replace = TRUE)
}
length(dat)
data(iris); library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
modFit
getTree(modFit$finalModel,k=2)
View(training)
irisP <- classCenter(training[,c(3,4)], training$Species, modFit$finalModel$prox)
irisP <- as.data.frame(irisP); irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.Length, col=Species,data=training)
p + geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
pred <- predict(modFit,testing); testing$predRight <- pred==testing$Species
tab(pred)
table(pred)
table(pred,testing$Species)
pred <- predict(modFit,testing); testing$predRight <- pred==testing$Species
table(pred,testing$Species)
library(ISLR); data(Wage); library(ggplot2); library(caret);
view(Wage)
View(testing)
View(Wage)
Wage <- subset(Wage,select=-c(logwage))
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
?train
modFit <- train(wage ~ ., method="gbm",data=training,verbose=FALSE)
modFit <- train(wage ~ ., method="gbm",data=training,verbose=FALSE)
warnings()
library(datasets)
data(Population)
runGist("eda98b0dfdaec284f271")
library(googleVis)
library(shiny)
runGist("eda98b0dfdaec284f271")
runExample("01_hello")
runExample("02_text")
runExample("03_reactivity")
runExample("04_mpg")
runExample("05_sliders")
runExample("06_tabsets")
runExample("07_widgets")
runExample("08_html")
runExample("09_upload")
runExample("10_download")
runExample("11_timer")
setwd("D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1")
runApp("test1")
runApp("../test1")
runApp("../test1")
runApp("../test1")
runApp("../test1")
runApp("../test1")
runApp("../test1")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp("../test1")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages(c("maps", "mapproj"))
shiny::runApp()
shiny::runApp()
install.packages("quantmod")
runApp("../stockVis")
runGist("3239667")
runGist(4970975)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='wyih', token='41E3DA54BB0F100949C0BB620758413C', secret='A0QiYoJQ8cSrmwmniimv9vmMfHxeDz+XYv54eVE0')
runApp()
deployApp()
setwd("../stockVis/")
runApp()
deployApp()
terminateApp("test1")
?pastee
?paste
paste("A", 1:6, sep = "")
library(quantmod)
getSymbols(MSFT, from ="2000-01-03", to = "2012-04-03")
getSymbols("MSFT", from ="2000-01-03", to = "2012-04-03")
View(MSFT)
MSFT[c(1,-1),]
MSFT[,c(1,-1)]
MSFT[,-1]
data = MSFT[,-1]
View(data)
adjusted=paste("MSFT",".Adjusted")
adjusted=paste("MSFT",".Adjusted",sep="")
data = MSFT[, adjusted]
View(data)
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
?renderPlot
plot(data)
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
?mainPanel
chartSeries(MSFT)
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
?chartSeries
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
CalculateReturns(MSFT, method="simple")
library(PerformanceAnalytics)
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
CalculateReturns(MSFT, method="simple")
MSFT.ret = CalculateReturns(MSFT, method="simple")
MSFT.ret = MSFT.ret[-1,]
plot(MSFT.ret)
dailyReturn(MSFT)
monthlyReturn(SBUX)
monthlyReturn(MSFT)
allReturns(MSFT)
heads(allReturns(MSFT))
head(allReturns(MSFT))
yearly(return)
yearlyReturns(MSFT)
periodReturn(MSFT)
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
runExample("02_text")
runExample("03_reactivity")
runExample("06_tabsets")
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
head(monthlyReturn(MSFT))
?periodReturn
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
head(monthlyReturn(MSFT,subset='2013-01-01'::))
head(monthlyReturn(MSFT,subset='2013-01-01::'))
head(monthlyReturn(MSFT,subset='2013::'))
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
library(PerformanceAnalytics)
?CalculateReturns
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
shiny::runApp('D:/Document/My Copy/Copy/Portable Python 2.7.3.2/App/Scripts/devdataprod-002/test1')
deployApp()
setwd("../test1/")
runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runGist(66b31a379c7670979f68)
shiny::runGist('66b31a379c7670979f68')
getwd()
library(slidify)
?slidify
?author
author(use_git = TRUE, open_rmd = TRUE)
author(slides,use_git = TRUE, open_rmd = TRUE)
author("slides",use_git = TRUE, open_rmd = TRUE)
slidify("index.Rmd")
source('~/.active-rstudio-document', echo=TRUE)
slidify("index.Rmd")
slidify("index.Rmd")
getSymbols("MSFT", from ="2000-01-03", to = "2012-04-03")
slidify("index.Rmd")
library(quantmod);
data <- getSymbols("MSFT", from ="2013-01-03", to = as.character(Sys.Date()));
data <- data[, "MSFT.adjusted", drop=F];
head(monthlyReturn(data))
getSymbols("MSFT", from ="2013-01-03", to = as.character(Sys.Date()));
data <- data[, "MSFT.adjusted", drop=F];
getSymbols("MSFT", from ="2013-01-03", to = as.character(Sys.Date()))
getSymbols("MSFT", from ="2013-01-03", to = as.character(Sys.Date())))
getSymbols("MSFT", from ="2013-01-03", to = as.character(Sys.Date()))
data <-getSymbols("MSFT", from ="2013-01-03", to = "2014-06-20");
